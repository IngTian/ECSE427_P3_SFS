# Set colors.
if (NOT WIN32)
    string(ASCII 27 Esc)
    set(ColourReset "${Esc}[m")
    set(ColourBold "${Esc}[1m")
    set(Red "${Esc}[31m")
    set(Green "${Esc}[32m")
    set(Yellow "${Esc}[33m")
    set(Blue "${Esc}[34m")
    set(Magenta "${Esc}[35m")
    set(Cyan "${Esc}[36m")
    set(White "${Esc}[37m")
    set(BoldRed "${Esc}[1;31m")
    set(BoldGreen "${Esc}[1;32m")
    set(BoldYellow "${Esc}[1;33m")
    set(BoldBlue "${Esc}[1;34m")
    set(BoldMagenta "${Esc}[1;35m")
    set(BoldCyan "${Esc}[1;36m")
    set(BoldWhite "${Esc}[1;37m")
endif ()

# Define project meta info.
set(C_VER 3.10)
cmake_minimum_required(VERSION "${C_VER}")
project(ECSE427P3)
set(CMAKE_INCLUDE_PATH "${CMAKE_INCLUDE_PATH} /usr/local/include")
message("${ColourBold} PROJECT NAME   : ${BoldGreen}${PROJECT_NAME}${ColourReset}")
message("${ColourBold} MIN CXX VERSION: ${BoldGreen}${C_VER}${ColourReset}")
message("${ColourBold} PROJECT ROOT   : ${BoldGreen}${CMAKE_SOURCE_DIR}${ColourReset}")
message("------------- DISPLAYING INCLUDED PATHS -------------")
foreach (path ${CMAKE_INCLUDE_PATH})
    message("${Cyan}${path}${ColourReset}")
endforeach ()

# Define compile parameters
message("---------------- DISPLAYING CXX FLAGS ---------------")
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wall -c -g -ansi -pedantic -std=gnu99 --cflags --libs")
add_definitions(-D_FILE_OFFSET_BITS=64)
include(FindPkgConfig)
pkg_search_module(FUSE REQUIRED fuse)
set(CMAKE_EXE_LINKER_FLAGS_DEBUG "${CMAKE_EXE_LINKER_FLAGS_DEBUG}")
foreach (cxx_flag ${CMAKE_CXX_FLAGS})
    message("${Yellow}${cxx_flag}${ColourReset}")
endforeach ()
set(EXECUTABLE_OUTPUT_PATH ${CMAKE_BINARY_DIR}/bin)
set(LIBRARY_OUTPUT_PATH ${CMAKE_BINARY_DIR}/lib)
message("${ColourBold}CMAKE BINARY DIR: ${BoldYellow}${CMAKE_BINARY_DIR}${ColourReset}")
include_directories(/usr/local/include)
include_directories("${FUSE_INCLUDE_DIRS}")


# Find the fuse module.
#find_package(PkgConfig REQUIRED)
#pkg_check_modules(FUSE REQUIRED fuse)
#pkg_get_variable(F fuse FUSE)

# Executables
#add_executable(test0 sfs_test0.c disk_emu.c sfs_api.c)
#add_executable(test1 sfs_test1.c disk_emu.c sfs_api.c)
#add_executable(test2 sfs_test2.c disk_emu.c sfs_api.c)
add_executable(test3 fuse_wrap_old.c disk_emu.c sfs_api.c)
target_link_libraries(test3 ${FUSE_LIBRARIES})
#target_link_libraries(test3 F)
#target_link_libraries(test3 ${FUSE_LIBRARIES})
#target_include_directories(test3 PUBLIC ${FUSE_INCLUDE_DIRS})
#target_compile_options(test3 PUBLIC ${FUSE_CFLAGS_OTHER})
#target_compile_options(test3 PRIVATE -D_FILE_OFFSET_BITS=64 -c -g -ansi -pedantic -Wall -std=gnu99)
#link_libraries(pkg-config=fuse --cflags --libs)
#add_executable(test4 fuse_wrap_new.c disk_emu.c sfs_api.c)
